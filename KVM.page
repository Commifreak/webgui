Menu="Tasks:70"
Type="xmenu"
Tabs="true"
---
<link type="text/css" rel="stylesheet" href="/plugins/dynamix.kvm.manager/styles/dynamix.kvm.manager.css">
<link type="text/css" rel="stylesheet" href="/plugins/dynamix.kvm.manager/styles/jqueryFileTree.css">
<script type="text/javascript" src="/plugins/dynamix.kvm.manager/scripts/jqueryFileTree.js"></script>
<script type="text/javascript" src="/plugins/dynamix.kvm.manager/scripts/dynamix.kvm.manager.js"></script>

<?php
if ($var['fsState'] != "Started") {
  echo "<p class='notice'>Array must be Started to manage Virtual Machines.</p>";
  return;
}

require_once('/usr/local/emhttp/plugins/dynamix.kvm.manager/classes/libvirt.php');

// Check if program is running and get config info
$libvirt_running = trim(shell_exec( "[ -f /proc/`cat /var/run/libvirt/libvirtd.pid 2> /dev/null`/exe ] && echo 'yes' || echo 'no' 2> /dev/null" ));
$domain_cfgfile = "/boot/config/domain.cfg";
if(!file_exists($domain_cfgfile)){
	$fp = fopen("$domain_cfgfile", 'w');
	fwrite($fp, 'DEBUG="no"'."\n".'MEDIADIR="/mnt/"'."\n".'DISKDIR="/mnt/"'."\n");
	fclose($fp);
}
// This will clean any ^M characters caused by windows from the config file
if (file_exists("$domain_cfgfile"))
	shell_exec("sed -i 's!\r!!g' '$domain_cfgfile'");
$domain_cfg = parse_ini_file( "$domain_cfgfile" );
$domain_debug = isset($domain_cfg['DEBUG']) ? $domain_cfg['DEBUG'] : "no"; 
if($domain_debug != "yes")
	error_reporting(0);
$domain_bridge = (!($domain_cfg['BRNAME'])) ? $var['BRNAME'] : $domain_cfg['BRNAME'];
$msg = (empty($domain_bridge)) ? "Error: Setup Bridge in Settings/Network Settings" : false;
$libvirt_service = isset($domain_cfg['SERVICE']) ?	$domain_cfg['SERVICE'] : "enable";
	
// Check if domain.img exists
$libvirt_filecheck = (file_exists( "/boot/config/plugins/dynamix.kvm.manager/domain.img" )) ? true : false;

// if domain.img exists check if not mounted then mount
if ($libvirt_filecheck) {
	if (!shell_exec("mount | grep domain.img" )) {
		shell_exec("mount -t ext4 /boot/config/plugins/dynamix.kvm.manager/domain.img /etc/libvirt" );
	}
}

if ($libvirt_running == "yes"){
	$uri = is_dir('/proc/xen') ? 'xen:///system' : 'qemu:///system';
	$lv = new Libvirt($uri, null, null, false);
	$info = $lv->host_get_node_info();
	$maxcpu = (int)$info['cores']*(int)$info['threads'];
	$maxmem = number_format(($info['memory'] / 1048576), 1, '.', ' ');
}

$theme = $display['theme'];
//set color on even rows for white or black theme
function bcolor($row, $color) { 
	if ($color == "white")
 		$color = ($row % 2 == 0) ? "transparent" : "#F8F8F8";
	else 
     	$color = ($row % 2 == 0) ? "transparent" : "#0C0C0C";
   return $color;
}

//create checkboxes for usb devices
function usb_checkbox($usb, $key)
{
	$deviceid = substr(strstr($usb, 'ID'),3,9);
	echo '<input class="checkbox" type="checkbox" value="'.$deviceid.'" name="usb['.$key.']" />';
	echo "<label>$usb</label><br />";
}

//create memory drop down option based on max memory
function memOption($maxmem) {
  	for ($i = 1; $i <= ($maxmem*2); $i++) {
     	$mem = ($i*512);
      echo "<option value='$mem'>$mem</option>";
	}
}

//create drop down options from arrays
function arrayOptions($ValueArray, $DisplayArray, $value) {
		for ($i = 0; $i < sizeof($ValueArray); $i++) {
		echo "<option value='$ValueArray[$i]'";
		if ($ValueArray[$i] == $value)
			echo " selected='selected'>$DisplayArray[$i] *</option>";
		else
  			echo ">$DisplayArray[$i]</option>";
	}
}

//create memory drop down options
function memOptions($maxmem, $mem) {
	for ($i = 1; $i <= ($maxmem*2); $i++) {
  		$mem2 = ($i*512);
  		echo "<option value=".$mem2;
		if ((int)$mem == $mem2)
			echo " selected='selected'>$mem2 *</option>";
		else
        	echo ">$mem2</option>";
	}
}
?>