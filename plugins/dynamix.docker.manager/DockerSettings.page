Menu="OtherSettings"
Title="Docker"
Icon="dynamix.docker.manager.png"
---
<?PHP
if ($var['fsState'] != "Started") {
  echo "<p class='notice'>Array must be Started to manage Docker.</p>";
  return;
}

// Add the Docker JSON client
require_once("/usr/local/emhttp/plugins/dynamix.docker.manager/dockerClient.php");
$docker          = new DockerClient();
$DockerUpdate    = new DockerUpdate();
$DockerTemplates = new DockerTemplates();

// Docker configuration file
$cfgfile = "/boot/config/docker.cfg";

if (!file_exists($cfgfile)) {
  echo "<p class='notice'>Missing docker.cfg file!</p>";
  return;
}
$dockercfg = parse_ini_file($cfgfile);


if (!array_key_exists('DOCKER_ENABLED', $dockercfg)) {
  $dockercfg['DOCKER_ENABLED'] = 'no';
}

// Check for nodatacow flag on Docker file; display warning
$realfile = $dockercfg['DOCKER_IMAGE_FILE'];
if (file_exists($realfile)) {
  if (strpos($realfile, '/mnt/user/') === 0) {
    $tmp = parse_ini_string(shell_exec("getfattr -n user.LOCATION " . $dockercfg['DOCKER_IMAGE_FILE'] . " | grep user.LOCATION"));
    $realfile = str_replace('user', $tmp['user.LOCATION'], $realfile);  // replace 'user' with say 'cache' or 'disk1' etc
  }

  if (exec("stat -c %T -f " . $realfile) == "btrfs") {
    if (shell_exec("lsattr " . $realfile . " | grep \"\\-C\"") == "") {
      echo '<p class="notice">Your existing Docker image file needs to be recreated due to an issue from an earlier beta of unRAID 6.  Failure to do so may result in your docker image suffering corruption at a later time.  Please do this NOW!</p>';
    }
  }
}
?>
<style type="text/css">
  .errortext {
    color: #EF3D47;
    display: none;
  }
</style>
<?if (pgrep('docker') === false):?>

<form id="settingsForm" markdown="1" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="<?=$cfgfile;?>" />
<input type="hidden" id="command" name="#command" value="/etc/rc.d/rc.docker stop" />

Enable Docker:
: <select id="DOCKER_ENABLED" name="DOCKER_ENABLED" size="1">
<?= mk_option($dockercfg['DOCKER_ENABLED'], 'no', 'No'); ?>
<?= mk_option($dockercfg['DOCKER_ENABLED'], 'yes', 'Yes'); ?>
</select>

> Before you can start the Docker service for the first time, please specify an image
> file for Docker to install to.  Once started, Docker will always automatically start
> after the array has been started.

Default image size:
: <input id="DOCKER_IMAGE_SIZE" type="number" name="DOCKER_IMAGE_SIZE" value="<?=$dockercfg['DOCKER_IMAGE_SIZE'];?>" required="required" />GB <span id="SIZE_ERROR" class="errortext"></span>

> If the system needs to create a new docker image file, this is the default size to use
> specified in GB.
>
> To resize an existing image file, specify the new size here.  Next time the Docker service is
> started the file (and file system) will increased to the new size (but never decreased).

Docker image:
: <input id="DOCKER_IMAGE_FILE" type="text" name="DOCKER_IMAGE_FILE" value="<?=$dockercfg['DOCKER_IMAGE_FILE'];?>" placeholder="e.g. /mnt/disk1/docker.img" required="required" /> <?php if (file_exists($dockercfg['DOCKER_IMAGE_FILE'])) { ?><span id="deletePanel"><label><input type="checkbox" id="deleteCheckbox" /> Delete Image File</label></span><?php } ?> <span id="IMAGE_ERROR" class="errortext"></span>

> You must specify an image file for Docker.  The system will automatically
> create this file when the Docker service is first started.  If you do not want Docker
> to run at all, set this field blank and click **Start**.

&nbsp;
: <input id="applyBtn" type="button" value="Apply" />
</form>

<?else:
// IF DOCKER STARTED
?>

<form id="settingsForm" markdown="1" method="POST" action="/update.php" target="progressFrame">
<input type="hidden" name="#file" value="<?=$cfgfile;?>" />
<input type="hidden" id="command" name="#command" value="/etc/rc.d/rc.docker start" />
Enable Docker:
: <select id="DOCKER_ENABLED" name="DOCKER_ENABLED" size="1">
<?= mk_option($dockercfg['DOCKER_ENABLED'], 'no', 'No'); ?>
<?= mk_option($dockercfg['DOCKER_ENABLED'], 'yes', 'Yes'); ?>
</select>

> Stopping the Docker service will first stop all the running containers.

Docker version:
: <? $arrInfo = $docker->getInfo(); echo $arrInfo['Version']; ?>

> This is the docker version.

Docker image:
: <?=$dockercfg['DOCKER_IMAGE_FILE'];?>

> This is the docker volume.

&nbsp;
: <input id="applyBtn" type="button" value="Apply" />
</form>

Docker volume info:
: <?echo "<pre>".shell_exec("btrfs filesystem show /var/lib/docker")."</pre>";?>

> This is the output of *btrfs filesystem show /var/lib/docker*.

<?$cmd="btrfs scrub start /var/lib/docker";?>

<?if (pgrep("-f '$cmd'") !== false):?>

<form markdown="1" method="POST" action="/update.htm" target="progressFrame">

&nbsp;
: <input type="submit" value="Scrub" disabled /> *Running*

> If you want to Cancel the operation, close the window where it is running and then Refresh this page.

&nbsp;
: <input type="submit" value="Stop" disabled />
</form>

<?else:?>

<form markdown="1" method="POST" action="/update.htm" target="progressFrame">
&nbsp;
: <input type="button" value="Scrub" onclick="openBox('<?=$cmd;?> '+document.getElementById('scrub_options').value,'Scrub',490,430)">
  <input type="text" id="scrub_options" maxlength="256" value="-B -R -d -r"> Options (see Help)

> **Scrub** will open a window and run the *btrfs scrub* program to check file system integrity.
>
> The *Options* field is initialized to include *-r* which specifies read-only.  If repair is needed, you should run
> a second Scrub pass, removing the *-r* option; this will permit *btrfs scrub* to fix the file system.
>
> After starting a Scrub, you should monitor the newly opened window for progress and status.  Closing the
> window before completion will Cancel the operation, but is not recommended - you should let it finish.  Depending on
> how large the file system is, and what errors might be present, the operation can take **a long time** to finish (hours).
> Not much info is printed in the window, but you can verify the operation is running by observing the read/write counters
> increasing for the device on the Main page.

</form>


<?endif;?>
<?endif;?>

<script type="text/javascript">
$(function() {
  //$.ajaxSetup({ async: false });
  $("#applyBtn").click(function(){
    if ($("#deleteCheckbox").length && $("#deleteCheckbox").is(":checked")) {
      $("#command").val("rm \"" + $("#DOCKER_IMAGE_FILE").val() + "\"");
      $("#DOCKER_IMAGE_FILE").val("");
      $("#settingsForm").submit();
      return;
    }

    $("#command").val("/etc/rc.d/rc.docker " + ($("#DOCKER_ENABLED").val()=="yes" ? "start" : "stop"));

    if ($("#DOCKER_IMAGE_SIZE").length && $("#DOCKER_IMAGE_FILE").length) {
      var isError = false;
      var size = $("#DOCKER_IMAGE_SIZE").val();
      var target = $("#SIZE_ERROR");
      if (! $.isNumeric( size )){
        target.fadeIn().html('Error: value must be a number.');
        isError = true;
      } else {
        target.fadeOut();
      }
      var image = $("#DOCKER_IMAGE_FILE").val();
      if (image.indexOf('/mnt/user/') === 0) {
        return;
      }

      target = $("#IMAGE_ERROR");
      $.getJSON( "/plugins/dynamix.docker.manager/update_cfg.php?is_dir=" + image).done(function( json ) {
        if (json.is_dir === true){
          target.fadeIn().html('Error: must be a file; directory provided.');
          isError = true;
        } else {
          target.fadeOut();
        }

        if (!isError) {$("#settingsForm").submit();}
      });
      return;
    }

    $("#settingsForm").submit();
  });

  if ($("#DOCKER_IMAGE_FILE").length) {
    $("#DOCKER_IMAGE_FILE").keyup(function(){
      if ($(this).val().indexOf('/mnt/user/') === 0) {
        $("#IMAGE_ERROR").fadeIn().html('Error: cannot specify user share (instead use cache, disk1, disk2, etc).');
        $("#applyBtn").prop("disabled", true);
      } else {
        $("#IMAGE_ERROR").fadeOut();
        $("#applyBtn").prop("disabled", false);
      }
      <? if (file_exists($dockercfg['DOCKER_IMAGE_FILE'])) { ?>
      if ($(this).val() != "<?=$dockercfg['DOCKER_IMAGE_FILE']?>") {
        $("#deleteCheckbox").prop("disabled", true).attr("checked", false);
        $("#deletePanel").fadeOut();
      } else {
        $("#deleteCheckbox").attr("checked", false).prop("disabled", false);
        $("#deletePanel").fadeIn();
      }
      <? } ?>
    });

    $("#deleteCheckbox").change(function(){
      var checked = $(this).is(":checked");
      $("#DOCKER_ENABLED").prop("disabled", checked).val('no');
      $("#DOCKER_IMAGE_SIZE").prop("disabled", checked);
      $("#DOCKER_IMAGE_FILE").prop("disabled", checked).val("<?=$dockercfg['DOCKER_IMAGE_FILE']?>");
      $("#applyBtn").val(checked ? "Delete" : "Apply");
    });
  }
});
</script>
