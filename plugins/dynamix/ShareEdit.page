Menu="Share:1"
Title="Share Settings"
---
<?PHP
/* Copyright 2014, Lime Technology
 * Copyright 2014, Bergware International.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
> A *Share*, also called a *User Share*, is simply the name of a top-level directory that exists on one or more of your
> storage devices (array and cache).  Each share can be exported for network access.  When browsing a share, we return the
> composite view of all files and subdirectories for which that top-level directory exists on each storage device.
<?
if ($name == "") {
  /* default values when adding new share */
  $share = array("nameOrig"   => "",
                 "name"       => "",
                 "comment"    => "",
                 "allocator"  => "highwater",
                 "floor"      => "",
                 "splitLevel" => "",
                 "include"    => "",
                 "exclude"    => "",
                 "useCache"   => "no");
} else if (array_key_exists($name, $shares)) {
  /* edit existing share */
  $share = $shares[$name];
} else {
  /* handle share deleted case */
  echo "<p class='notice'>Share $name has been deleted.</p><button type='button' onclick='done()'>OK</button>";
  return;
}

/* check for empty share */
function shareEmpty($name) {
  return (($files = @scandir('/mnt/user/'.$name)) && (count($files) <= 2));
}

$split = array( "" => "Permit any directory to be split",
               "0" => "Manual: do not automatically split directories",
               "1" => "Automatically split top directory as necessary",
               "2" => "Automatically split top two directory levels as necessary",
               "3" => "Automatically split top three directory levels as necessary",
               "4" => "Automatically split top four directory levels as necessary",
               "5" => "Automatically split top five directory levels as necessary");

if ($var['shareUserInclude']) {
  $myDisks = explode(',',$var['shareUserInclude']);
} else {
  $myDisks = array();
  foreach ($disks as $disk) $myDisks[] = $disk['name'];
}

if ($var['shareUserExclude']) {
  $exclude = explode(',',$var['shareUserExclude']);
  foreach ($exclude as $disk) {
    $index = array_search($disk,$myDisks);
    if ($index !== false) array_splice($myDisks,$index,1);
  }
}
?>
<script>
$(function() {
  presetSpace(document.share_edit.shareFloor);
  $("#s1").dropdownchecklist({emptyText:'All', width:300, explicitClose:'...close'});
  $("#s2").dropdownchecklist({emptyText:'None', width:300, explicitClose:'...close'});
});

function presetSpace(shareFloor) {
  var unit = ['KB','MB','GB','TB','PB'];
  var scale = shareFloor.value;
  if (scale.replace(/[0-9.,\s]/g,'').length>0) return;
  var base = scale>0 ? Math.floor(Math.log(scale)/Math.log(1000)) : 0;
  if (base>=unit.length) base = unit.length-1;
  shareFloor.value = (scale/Math.pow(1000, base))+unit[base];
}

// Fool unRAID by simulating the original input fields
function prepareEdit(form) {
// Test share name validity
  var share = form.shareName.value;
  if (!share) {
    alert('Please enter a share name');
    return false;
  }
  if (share.match('^disk[0-9]+$')) {
    alert('Invalid share name specified\nDo not use reserved names.');
    return false;
  }
  if (share.match(' ')<?if (shareEmpty($share['name'])):?> && !form.confirmDelete.checked<?endif;?>) {
    alert('Warning: using spaces in the share name may give unpredictable results.');
  }
// Adjust minimum free space value to selected unit
  var unit = 'KB,MB,GB,TB,PB';
  var scale = form.shareFloor.value;
  var index = unit.indexOf(scale.replace(/[0-9.,\s]/g,'').toUpperCase());
  form.shareFloor.value = scale.replace(/[A-Z\s]/gi,'') * Math.pow(1000, (index>0 ? index/3 : 0))
// Return splitlevel as single value
  for (var i=0,item; item=form.shareSplitLevel.options[i]; i++) {
    if (item.selected) {
      var split = item.value;
      item.selected = false;
      break;
    }
  }
  item = form.shareSplitLevel.options[0];
  item.value = split;
  item.selected = true;
// Return include as single line input
  var include = '';
  for (var i=0,item; item=form.shareInclude.options[i]; i++) {
    if (item.selected) {
      if (include.length) include += ',';
      include += item.value;
      item.selected = false;
    }
  }
  item = form.shareInclude.options[0];
  item.value = include;
  item.selected = true;
// Return exclude as single line input
  var exclude = '';
  for (var i=0,item; item=form.shareExclude.options[i]; i++) {
    if (item.selected) {
      if (exclude.length) exclude += ',';
      exclude += item.value;
      item.selected = false;
    }
  }
  item = form.shareExclude.options[0];
  item.value = exclude;
  item.selected = true;
  return true;
}
</script>

<form markdown="1" name="share_edit" method="POST" action="/update.htm" target="progressFrame" onsubmit="return prepareEdit(this)">
<input type="hidden" name="shareNameOrig" value="<?=$share['nameOrig']?>">

Name:
: <input type="text" name="shareName" maxlength="40" value="<?=$share['name']?>">

> The share name can be up to 40 characters, and is case-sensitive. While almost all characters can be used,
> make your life easier and avoid special characters such as apostrophes and quotes.

Comments:
: <input type="text" name="shareComment" maxlength="256" value="<?=$share['comment']?>">

> Anything you like, up to 256 characters.

Allocation method:
: <select name="shareAllocator" size="1">
  <?=mk_option($share['allocator'], "highwater", "High-water")?>
  <?=mk_option($share['allocator'], "mostfree", "Most-free")?>
  <?=mk_option($share['allocator'], "fillup", "Fill-up")?>
  </select>

> Need to include help about allocation method.

Minimum free space:
: <input type="text" name="shareFloor" maxlength="16" value="<?=$share['floor']?>">

> The *minimum free space* available to allow writing to the share.<br>
> Choose a value which is equal or greater than the biggest single file size you intend to copy to the share.
> Include units KB, MB, GB and TB as appropriate, e.g. 10MB.

Split level:
: <select name="shareSplitLevel" size="1" style="width:320px">
  <?foreach ($split as $level => $text):?>
  <?=mk_option($share['splitLevel'], strval($level), $text)?>
  <?endforeach;?>
  </select>

> Need to include help about split levels.

Included disk(s):
: <select id="s1" name="shareInclude" size="1" multiple="multiple" style="display:none">
  <?foreach ($myDisks as $disk):?>
  <?=mk_option_check($disk, $share['include'])?>
  <?endforeach;?>
  </select>

> Specify the disks which can be used by the share. By default all disks are included.

Excluded disk(s):
: <select id="s2" name="shareExclude" size="1" multiple="multiple" style="display:none">
  <?foreach ($myDisks as $disk):?>
  <?=mk_option_check($disk, $share['exclude'])?>
  <?endforeach;?>
  </select>

> Specify the disks which can *not* be used by the share. By default no disks are excluded.

<?if ($var['cacheActive']=="yes"):?>
Use cache disk:
: <select name="shareUseCache" size="1">
  <?=mk_option($share['useCache'], "no", "No")?>
  <?=mk_option($share['useCache'], "yes", "Yes")?>
  <?=mk_option($share['useCache'], "only", "Only")?>
  </select>
<?endif;?>

> Need to include help about the cache disk.

<?if ($share['name'] == ""):?>
&nbsp;
: <input type="submit" name="cmdEditShare" value="Add Share"><button type="button" onclick="done()">Cancel</button>
<?elseif (shareEmpty($share['name'])):?>
Share empty?
: Yes

Delete<input type="checkbox" name="confirmDelete" onchange="chkDelete(this.form, this.form.cmdEditShare);">
: <input type="submit" name="cmdEditShare" value="Apply"><button type="button" onclick="done()">Done</button>
<?else:?>
Share empty?
: No

&nbsp;
: <input type="submit" name="cmdEditShare" value="Apply"><button type="button" onclick="done()">Done</button>
<?endif;?>
</form>