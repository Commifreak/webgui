#!/usr/bin/php
<?PHP
/* Copyright 2014, Bergware International.
 * Copyright 2014, Lime Technology
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
$notify = "/usr/local/sbin/notify";

function parse_plugin_cfg($plugin, $sections=false) {
  $vars = @parse_ini_file("/usr/local/emhttp/plugins/{$plugin}/default.cfg", $sections);
  $conf = "/boot/config/plugins/{$plugin}/{$plugin}.cfg";
  if (is_file($conf)) $vars = array_merge($vars, parse_ini_file($conf, $sections));
  return $vars;
}

function my_temp($value) {
  global $unraid;
  $unit = $unraid['display']['unit'];
  return ($unit=='C' ? str_replace('.', $unraid['display']['number'][0], $value) : round(9/5*$value+32))." $unit";
}

function my_disk($name) {
  return ucfirst(preg_replace('/^(disk|cache)([0-9]+)/','$1 $2',$name));
}

$disks  = @parse_ini_file("/var/local/emhttp/disks.ini",true);
$saved  = @parse_ini_file("/var/local/emhttp/monitor.ini",true);
$unraid = @parse_plugin_cfg("dynamix",true);

foreach ($disks as $disk) {
  $name = $disk['name'];
  if ($name=='flash' || substr($disk['status'],-3)=='_NP') continue;
  $temp = $disk['temp'];
  $info = "{$disk['id']} ({$disk['device']})";
  $text = my_disk($name).($name=='cache'||$name=='parity'?' disk':'');

// process temperature notifications. Give messages only when changes occur!
  $warn = $temp>=$unraid['display']['max'] ? 'alert' : ($temp>=$unraid['display']['hot'] ? 'warning' : '');
  $item = 'temp';
  $last = isset($saved[$item][$name]) ? $saved[$item][$name] : 0;
  if ($warn) {
    if ($temp>$last) {
      exec("$notify -e \"unRAID $text temperature\" -s \"".ucfirst($warn).": $text ".($warn=='alert'?'overheated (':'is hot (').my_temp($temp).")\" -d \"$info\" -i \"$warn\" -x");
      $saved[$item][$name] = $temp;
    }
  } else {
    if ($last>0) {
      exec("$notify -e \"unRAID $text message\" -s \"Notice: $text returned to normal temperature\" -d \"$info\" -i \"normal\" -x");
      unset($saved[$item][$name]);
    }
  }

// process disk operation notifications. Give messages only when changes occur!
  $warn = strtok($disk['color'],'-');
  $item = 'disk';
  $last = isset($saved[$item][$name]) ? $saved[$item][$name] : "";
  switch ($warn) {
  case 'red':
    if ($warn!=$last) {
      exec("$notify -e \"unRAID $text error\" -s \"Alert: $text in error state\" -d \"$info\" -i \"alert\"");
      $saved[$item][$name] = $warn;
    }
  break;
  case 'yellow':
    if ($warn!=$last) {
      exec("$notify -e \"unRAID $text error\" -s \"Warning: $text has invalid data\" -d \"$info\" -i \"warning\"");
      $saved[$item][$name] = $warn;
    }
  break;
  default:
    if ($last) {
      exec("$notify -e \"unRAID $text message\" -s \"Notice: $text returned to normal operation\" -d \"$info\" -i \"normal\"");
      unset($saved[$item][$name]);
    }
  break;}

// process disk SMART notifications. Give messages only when changes occur!
  $warn = exec("awk '$1==5 {print $10}' /var/local/emhttp/smart/{$disk['name']}");
  $item = 'smart';
  $last = isset($saved[$item][$name]) ? $saved[$item][$name] : 0;
  if ($warn) {
    if (!$last) {
      exec("$notify -e \"unRAID $text SMART failure\" -s \"Alert: $text failed SMART health check\" -d \"$info\" -i \"alert\"");
      $saved[$item][$name] = $warn;
    }
  } else {
    if ($last) {
      exec("$notify -e \"unRAID $text SMART message\" -s \"Notice: $text passed SMART health check\" -d \"$info\" -i \"normal\"");
      unset($saved[$item][$name]);
    }
  }
}
if ($saved) {
  $text = "";
  foreach ($saved as $item => $block) {
    $text .= "[$item]\n";
    foreach ($block as $key => $value) $text .= "$key=\"$value\"\n";
  }
  file_put_contents('/var/local/emhttp/monitor.ini', $text);
}
?>
