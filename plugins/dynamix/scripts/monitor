#!/usr/bin/php
<?PHP
/* Copyright 2014, Bergware International.
 * Copyright 2014, Lime Technology
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
require_once "/usr/local/emhttp/webGui/include/Wrappers.php";

$notify = "/usr/local/sbin/notify";

function my_var($key) {
  return exec("awk -F= '/^'$key'/ {print $2}' /proc/mdcmd");
}

function my_scale($value, &$unit, $precision = NULL) {
  global $unraid;
  $scale = $unraid['display']['scale'];
  $number = $unraid['display']['number'];
  $units = array('B','KB','MB','GB','TB','PB');
  if ($scale==0 && !$precision) {
    $unit = '';
    return number_format($value, 0, $number[0], ($value>=10000 ? $number[1] : ''));
  } else {
    $base = $value ? floor(log($value, 1000)) : 0;
    if ($scale>0 && $base>$scale) $base = $scale;
    $unit = $units[$base];
    $value = round($value/pow(1000, $base), $precision ? $precision : 2);
    return number_format($value, $precision ? $precision : (($value-intval($value)==0 || $value>=100) ? 0 : ($value>=10 ? 1 : 2)), $number[0], ($value>=10000 ? $number[1] : ''));
  }
}

function my_temp($value) {
  global $unraid;
  $unit = $unraid['display']['unit'];
  return ($unit=='C' ? str_replace('.', $unraid['display']['number'][0], $value) : round(9/5*$value+32))." $unit";
}

function my_disk($name) {
  return ucfirst(preg_replace('/^(disk|cache)([0-9]+)/','$1 $2',$name));
}

function plus($val, $word, $last) {
  return $val>0 ? (($val || $last) ? ($val.' '.$word.($val!=1?'s':'').($last ?'':', ')) : '') : '';
}

function my_check($time) {
  global $disks;
  if (!$time) return "unavailable (system reboot or log rotation)";
  $days = floor($time/86400);
  $hmss = $time-$days*86400;
  $hour = floor($hmss/3600);
  $mins = $hmss/60%60;
  $secs = $hmss%60;
  return plus($days,'day',($hour|$mins|$secs)==0).plus($hour,'hour',($mins|$secs)==0).plus($mins,'minute',$secs==0).plus($secs,'second',true)."<br>Average speed: ".(isset($disks['parity']['sizeSb']) ? my_scale($disks['parity']['sizeSb']*1024/$time,$unit,1)." $unit/sec" : "unknown");
}

function my_error($code) {
  switch ($code) {
  case -4:
    return "user abort";
  default:
    return $code;
  }
}

function read_temp($name) {
  $temp = exec("awk '/Temperature/{print $10}' /var/local/emhttp/smart/$name");
  return $temp ? $temp : 0;
}

function active_state($name) {
  $state = exec("awk '/STANDBY/{print $4}' /var/local/emhttp/smart/$name");
  return strlen($state)==0;
}

$saved  = @parse_ini_file("/var/local/emhttp/monitor.ini",true);
$disks  = parse_ini_file("/var/local/emhttp/disks.ini",true);
$var    = parse_ini_file("/var/local/emhttp/var.ini");
$unraid = parse_plugin_cfg("dynamix",true);
$events = $unraid['notify']['events'];
$max    = $unraid['display']['max'];
$hot    = $unraid['display']['hot'];
$server = strtoupper($var['NAME']);
$active = array();
$errors = array();
$parity = false;
$cache  = false;

foreach ($disks as $disk) {
  $name = $disk['name'];
  if ($name=='flash' || substr(my_var("rdevStatus.{$disk['idx']}"),-3)=='_NP') continue;
  $temp = read_temp($name);
  $info = "{$disk['id']} ({$disk['device']})";
  if ($info==" ()") $info = 'No device identification present';
  $text = my_disk($name).($name=='cache'||$name=='parity'?' disk':'');

// process temperature notifications. Give messages only when changes occur!
  $warn = $temp>=$max ? 'alert' : ($temp>=$hot ? 'warning' : '');
  $item = 'temp';
  $last = isset($saved[$item][$name]) ? $saved[$item][$name] : 0;
  if ($warn) {
    if ($temp>$last) {
      exec("$notify -e \"unRAID $text temperature\" -s \"".ucfirst($warn)." [$server] - $text ".($warn=='alert'?'overheated (':'is hot (').my_temp($temp).")\" -d \"$info\" -i \"$warn\"");
      $saved[$item][$name] = $temp;
    }
  } else {
    if ($last) {
      exec("$notify -e \"unRAID $text message\" -s \"Notice [$server] - $text returned to normal temperature\" -d \"$info\"");
      unset($saved[$item][$name]);
    }
  }

// process disk operation notifications. Give messages only when changes occur!
  $warn = strtok($disk['color'],'-');
  $item = 'disk';
  $last = isset($saved[$item][$name]) ? $saved[$item][$name] : "";
  switch ($warn) {
  case 'red':
    if ($warn!=$last) {
      $status = strtolower(str_replace(array('NP_','_'),array('',' '),$disk['status']));
      exec("$notify -e \"unRAID $text error\" -s \"Alert [$server] - $text in error state ($status)\" -d \"$info\" -i \"alert\"");
      $saved[$item][$name] = $warn;
    }
  break;
  case 'yellow':
    if ($warn!=$last) {
      exec("$notify -e \"unRAID $text error\" -s \"Warning [$server] - $text has invalid data\" -d \"$info\" -i \"warning\"");
      $saved[$item][$name] = $warn;
    }
  break;
  default:
    if ($last) {
      exec("$notify -e \"unRAID $text message\" -s \"Notice [$server] - $text returned to normal operation\" -d \"$info\"");
      unset($saved[$item][$name]);
    }
  break;}

// Count number of active disks, excluding flash drive
  if (active_state($name)) {
    $active[] = "$text - $info (".my_temp($temp).")";
    if ($name == 'parity') $parity = true;
    if ($name == 'cache') $cache = true;
  }

// Count errors
  if ($numErrors = my_var("rdevNumErrors.{$disk['idx']}")) $errors[] = "$text - $info (errors $numErrors)";

// process disk SMART notifications. Give messages only when changes occur!
  unset($codes);
  exec("awk '$1~/^($events)$/{print $1,$10,$2,$9}' /var/local/emhttp/smart/{$disk['name']}", $codes);
  $item = 'smart';
  foreach ($codes as $code) {
    if (!$code) continue;
    $warn = explode(' ',$code);
    $attr = "$name.{$warn[0]}";
    $word = str_replace(array('_',' (-) '),array(' ',''),strtolower($warn[2]).' ('.strtolower($warn[3]).') ');
    $last = isset($saved[$item][$attr]) ? $saved[$item][$attr] : 0;
    if ($warn[1]>0) {
      if ($warn[1]>$last) {
        exec("$notify -e \"unRAID $text SMART health [{$warn[0]}]\" -s \"Warning [$server] - $word is {$warn[1]}\" -d \"$info\" -i \"warning\"");
        $saved[$item][$attr] = $warn[1];
      }
    } else {
      if ($last) {
        exec("$notify -e \"unRAID $text SMART message [{$warn[0]}]\" -s \"Notice [$server] - $word returned to normal value\" -d \"$info\"");
        unset($saved[$item][$attr]);
      }
    }
  }
}

$item = 'array';
$name = 'errors';
$last = isset($saved[$item][$name]) ? $saved[$item][$name] : 0;
$warn = count($errors);
$info = "Array has $warn disk".($warn==1 ? "" : "s")." with read errors";

// report array read errors. Give messages on disk changes.
if ($warn>0) {
  if ($warn<>$last) {
    $message = implode('\n', $errors);
    exec("$notify -e \"unRAID array errors\" -s \"Warning [$server] - array has errors\" -d \"$info\" -m \"$message\" -i \"warning\"");
    $saved[$item][$name] = $warn;
  }
} else {
  if ($last) {
    exec("$notify -e \"unRAID array errors\" -s \"Notice [$server] - array turned good\" -d \"$info\"");
    unset($saved[$item][$name]);
  }
}

$name = 'active';
$last = isset($saved[$item][$name]) ? $saved[$item][$name] : 0;
$warn = count($active);
$word = $warn==1 ? "" : "including ";
$info = "Array has $warn active disk".($warn==1 ? "" : "s").($parity ? " ({$word}parity".($cache ? " & cache)" : ")") : ($cache ? " ({$word}cache)" : ""));

// report array active status. Give messages on active/inactive changes.
if ($warn>0) {
  if (!$last) {
    $message = implode('\n', $active);
    exec("$notify -e \"unRAID active array\" -s \"Notice [$server] - array is active\" -d \"$info\" -m \"$message\"");
    $saved[$item][$name] = $warn;
  }
} else {
  if ($last) {
    exec("$notify -e \"unRAID inactive array\" -s \"Notice [$server] - array turned inactive\" -d \"$info\"");
    unset($saved[$item][$name]);
  }
}

$name = 'parity';
$last = isset($saved[$item][$name]) ? $saved[$item][$name] : '';

// process parity check, parity sync and data-rebuild notifications. Give messages on start/stop conditions.
if (my_var('mdResync')>0) {
  if (!$last) {
    $last = my_var('mdNumInvalid')==0 ? 'Parity check' : (my_var('mdInvalidDisk')==0 ? 'Parity sync:' : 'Data rebuild:');
    $info = isset($disks['parity']['sizeSb']) ? "Parity size: ".my_scale($disks['parity']['sizeSb']*1024, $unit)." $unit" : "No parity disk present";
    exec("$notify -e \"unRAID $last\" -s \"Notice [$server] - $last started\" -d \"$info\" -i \"warning\"");
    $saved[$item][$name] = $last;
  }
} else {
  if ($last) {
    exec("awk '/sync completion/ {gsub(\"(time=|sec)\",\"\",x);print x;print \$NF};{x=\$NF}' /var/log/syslog|tail -2", $time);
    if (!count($time)) $time = array_fill(0,2,0);
    $info = $time[1]==0 ? "Duration: ".my_check($time[0]) : "Error code: ".my_error($time[1]);
    $level = $time[1]==0 ? "normal" : "warning";
    exec("$notify -e \"unRAID $last\" -s \"Notice [$server] - $last finished\" -d \"$info\" -i \"$level\"");
    unset($saved[$item][$name]);
  }
}

// check read-write status of USB flash drive
$name = 'flash';
$last = isset($saved[$item][$name]) ? $saved[$item][$name] : '';
$warn = exec("awk '/boot/{print $4}' /proc/mounts|cut -d, -f1");
$info = "{$disks['flash']['id']} ({$disks['flash']['device']})";

if ($warn!="rw") {
  if ($warn!=$last) {
    $message = implode('\n', $active);
    exec("$notify -e \"USB flash drive failure\" -s \"Alert [$server] - USB drive is not read-write\" -d \"$info\" -i \"alert\"");
    $saved[$item][$name] = $warn;
  }
} else {
  if ($last) {
    exec("$notify -e \"USB flash drive operation\" -s \"Notice [$server] - USB drive returned to normal operation\" -d \"$info\"");
    unset($saved[$item][$name]);
  }
}

// save new status
if ($saved) {
  $text = "";
  foreach ($saved as $item => $block) {
    if ($block) $text .= "[$item]\n";
    foreach ($block as $key => $value) $text .= "$key=\"$value\"\n";
  }
  if ($text) file_put_contents('/var/local/emhttp/monitor.ini', $text); else unlink('/var/local/emhttp/monitor.ini');
}

exit(0);
?>
