#!/usr/bin/php
<?PHP
/* Copyright 2012, Andrew Hamer-Adams, http://www.pixeleyes.co.nz.
 * Copyright 2014, Bergware International.
 * Copyright 2014, Lime Technology
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License version 2,
 * as published by the Free Software Foundation.
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 */
?>
<?
function parse_plugin_cfg($plugin, $sections=FALSE) {
  $keys = @parse_ini_file("/usr/local/emhttp/plugins/{$plugin}/default.cfg", $sections);
  $conf = "/boot/config/plugins/{$plugin}/{$plugin}.cfg";
  return is_file($conf) ? array_replace_recursive($keys, parse_ini_file($conf, $sections)) : $keys;
}

function usage() {
  echo <<<EOT
notify [-e "event"] [-s "subject"] [-d "description"] [-i "normal|warning|alert"] [-m "message"] [-x] [-t] [add]
  create a notification
  use -e to specify the event
  use -s to specify a subject
  use -d to specify a short description
  use -i to specify the severity
  use -m to specify a message (long description)
  use -x to create a single notification ticket
  use -t to force send email only (for testing)
  all options are optional

notify init
  Initialize the notification subsystem.

notify smtp-init
  Initialize sendmail configuration (ssmtp in our case).

notify get
  Output a json-encoded list of all the unread notifications.

notify archive file
  Move file from 'unread' state to 'archive' state.

EOT;
  return 1;
}

function ssmtp_init($ssmtp) {
  $conf   = $array;
  $conf[] = "# Generated";
  $conf[] = "Root={$ssmtp['root']}";
  $conf[] = "rewriteDomain={$ssmtp['rewriteDomain']}";
  $conf[] = "FromLineOverride=YES";
  $conf[] = "Mailhub={$ssmtp['server']}:{$ssmtp['port']}";
  $conf[] = "UseTLS={$ssmtp['UseTLS']}";
  $conf[] = "UseSTARTTLS={$ssmtp['UseSTARTTLS']}";
  if ($ssmtp['AuthMethod'] != "none") {
    $conf[] = "AuthMethod={$ssmtp['AuthMethod']}";
    $conf[] = "AuthUser={$ssmtp['AuthUser']}";
    $conf[] = "AuthPass={$ssmtp['AuthPass']}";
  }
  $conf[] = "";
  file_put_contents("/etc/ssmtp/ssmtp.conf", implode("\n", $conf));
}

function generate_email($event, $subject, $description, $importance, $message) {
  global $ssmtp;

  $rcpt = $ssmtp['RcptTo'];
  if ($importance == "warning" || $importance == "alert")
    $rcpt .= " ".$ssmtp['ErrorRcptTo'];
  $to = implode(",", explode(" ", trim($rcpt)));
  if (empty($to))
    return;

  $subj = $ssmtp['Subject'] . $subject;

  $headers   = array();
  $headers[] = "MIME-Version: 1.0";
  $headers[] = "X-Mailer: PHP/".phpversion();
  $headers[] = "Content-type: text/plain; charset=iso-8859-1";
  $headers[] = "From: {$ssmtp['root']}";
  $headers[] = "Reply-To: {$ssmtp['root']}";
  if (($importance == "warning" || $importance == "alert") && $ssmtp['SetEmailPriority']=="True") {
    $headers[] = "X-Priority: 1 (highest)";
    $headers[] = "X-Mms-Priority: High";
  }
  $headers[] = "";

  $body      = array();
  $body[]    = "Event: $event";
  $body[]    = "Subject: $subject";
  $body[]    = "Description: $description";
  $body[]    = "Importance: $importance";
  if (!empty($message)) {
    $body[]    = "";
    $body[]    = "$message";
  }
  $body[]    = "";

  return mail($to, $subj, implode("\n", $body), implode("\n", $headers));
}

// start

if ($argc == 1)
  exit(usage());

$method = $argv[1];
if ($method[0] == '-')
  $method = "add";

extract(parse_plugin_cfg("dynamix",true));
//echo "notify "; print_r($notify);
//echo "ssmtp "; print_r($ssmtp);

$unread = "{$notify['path']}/unread";
$archive = "{$notify['path']}/archive";

switch ($method) {
case 'init':
  @mkdir($unread,0755,true);
  @mkdir($archive,0755,true);
  $files = glob("$unread/*.notify", GLOB_NOSORT);
  foreach ($files as $file) if (!is_readable($file)) chmod($file,0666);
  break;

case 'smtp-init':
  ssmtp_init($ssmtp);
  break;

case 'add':
  $event = 'unRAID Status';
  $subject = 'Notification';
  $description = 'No description';
  $importance = 'normal';
  $timestamp = time();
  $ticket = $timestamp;
  $testing_email = false;

  $options = getopt("e:s:d:i:xt");
  foreach ($options as $option => $value) {
    switch ($option) {
     case 'e':
      $event = $value;
      break;
     case 's':
      $subject = $value;
      break;
     case 'd':
      $description = $value;
      break;
     case 'i':
      $importance = $value;
      break;
     case 'm':
      $message = $value;
      break;
     case 'x':
      $ticket = 'ticket';
      break;
     case 't':
      $testing_email = true;
      break;
    }
  }
  if (($notify['entity'] & 1)==1 && !$testing_email) {
    $file = "{$unread}/{$event}-{$ticket}.notify";
    file_put_contents($file,"timestamp = $timestamp\nevent = $event\nsubject = $subject\ndescription = $description\nimportance = $importance\n");
  }
  if (($notify['entity'] & 2)==2 || $testing_email) {
    if (!generate_email($event, $subject, $description, $importance, $message))
      exit(1);
  }
  break;

case 'get':
  $output = array();
  $json = array();
  $files = glob("$unread/*.notify", GLOB_NOSORT);
  usort($files, create_function('$a,$b', 'return filemtime($a)-filemtime($b);'));
  $i = 0;
  foreach ($files as $file) {
    if (!is_readable($file)) continue;
    $fields = preg_split('/\n/', file_get_contents($file));
    $time = true;
    foreach ($fields as $field) {
      if (!$field) continue;
      $item = explode('=', $field);
      if ($time) {$item[1] = date("{$notify['date']} {$notify['time']}", $item[1]); $time = false;}
      $output[$i][] = '\"'.trim($item[0]).'\":\"'.trim($item[1]).'\"';
    }
    $output[$i++][] = '\"file\":\"'.basename($file).'\"';
    chmod($file,0000);
  }
  for ($n=0; $n<$i; $n++) $json[] = '"{'.implode(',', $output[$n]).'}"';
  echo '['.implode(',', $json).']';
  break;

case 'archive':
  if ($argc != 3)
    exit(usage());
  $file = $argv[2];
  $open = "$unread/$file";
  $closed = "$archive/$file";
  if (file_exists($open)) {rename($open, $closed); chmod($closed,0666);}
  break;
}

exit(0);
?>
